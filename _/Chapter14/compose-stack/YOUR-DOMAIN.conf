
# HTTP — redirect all traffic to HTTPS
server {
    listen 80;
    # listen [::]:80 default_server ipv6only=on;

    # Here put the domain name the server is to be known as.
    server_name  YOUR-DOMAIN www.YOUR-DOMAIN;
    access_log   /var/log/YOUR-DOMAIN.access.log  main;
    error_log   /var/log/YOUR-DOMAIN.error.log  debug;

    # This is for handling the ACME challenge.  Substitute the
    # domain name here.
    location /.well-known/ {
       root /webroots/YOUR-DOMAIN/;
    }

    # Use this for a static HTML site, specifically the default
    # site supplied with the default Nginx container
#    location / {
#        root   /usr/share/nginx/html;
#        index  index.html index.htm;
#    }

    # Use this to force a redirect to the SSL/HTTPS site
    return 301 https://$host$request_uri;
}

# HTTPS service
server { # simple reverse-proxy
    # Enable HTTP/2
    listen 443 ssl http2;
    # listen [::]:443 ssl http2;

    # Substitute here the domain name for the site
    server_name  YOUR-DOMAIN www.YOUR-DOMAIN;
    access_log   /var/log/YOUR-DOMAIN.access.log  main;
    error_log   /var/log/YOUR-DOMAIN.error.log  debug;

    # Use the Let’s Encrypt certificates
    # Substitute in the domain name
    ssl_certificate /etc/letsencrypt/live/YOUR-DOMAIN/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/YOUR-DOMAIN/privkey.pem;

    # Replication of the ACME challenge handler.  Substitute
    # the domain name.
    location /.well-known/ {
        root /webroots/YOUR-DOMAIN/;
    }

    # Use this for a static HTML site, specifically the default
    # site supplied with the default Nginx container
    # location / {
    #    root   /usr/share/nginx/html;
    #    index  index.html index.htm;
    # }

    # Use this for proxying to a backend service
    # The HTTPS session is terminated at this Proxy.
    # The back end service will see a simple HTTP service.

    # See:
    # https://stackoverflow.com/questions/29043879/socket-io-with-nginx
    location ^~ /socket.io/ {

        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_set_header X-NginX-Proxy false;

        proxy_pass http://svc-notes:3000;
        proxy_redirect off;

        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    location / {
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-NginX-Proxy true;
        proxy_pass http://svc-notes:3000/;
        proxy_ssl_session_reuse off;
        proxy_set_header Host $http_host;
        proxy_cache_bypass $http_upgrade;
        proxy_redirect off;
    }

}
